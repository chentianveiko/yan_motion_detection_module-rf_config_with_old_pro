#ifndef __FRAME_H__
#define __FRAME_H__
/*
 *******************************************************************************
 *                                  INCLUDE                                  
 *******************************************************************************
 */
#include "ringbuffer.h"
#include "port.h"
   
/*
 *******************************************************************************
 *                                 CONSTANTS                                     
 *******************************************************************************
 */
#define FRAME_BEGIN     0x5AA5u
#define FRAME_END       0x6996u
   
/*
 *******************************************************************************
 *                                  MACROS                                  
 *******************************************************************************
 */
#define FRAME_HTONS(n)  (n)//(uint16_t)((((n) & 0xFF) << 8) | (((n) & 0xFF00) >> 8))
#define FRAME_HTONL(n)  (n)//(uint32)((((n) & 0xFF) << 24) | (((n) & 0xFF00) << 8) | (((n) & 0xFF0000UL) >> 8) | (((n) & 0xFF000000UL) >> 24))
#define FRAME_NTOHS(n)  FRAME_HTONS(n)
#define FRAME_NTOHL(n)  FRAME_HTONL(n)   

/*
 *******************************************************************************
 *                                  TYPEDEFS                                  
 *******************************************************************************
 */
enum FrameType
{
  IAP_FRAME = 0x55,
};

typedef uint16_t (* FrameOutput_t)(uint8_t *data, uint16_t length);
typedef void     (* FrameProcess_t)(enum FrameType type, uint8_t *data, uint16_t length);

/*
 *******************************************************************************
 *                                 FUNCTIONS                                 
 *******************************************************************************
 */
/*
 *******************************************************************************
  @brief    初始化通信层
 
  @params   无
	
  @return   无
 *******************************************************************************
 */ 
void FrameInit(void);

/*
 *******************************************************************************
  @brief    发送数据包
 
  @params   type  - 帧类型
	    data  - 发送的报文 
	    length- 报文长度
	
  @return   实际发送的字节数，改善失败返回0
 *******************************************************************************
 */ 
uint16_t FrameSend(enum FrameType type, uint8_t *data, uint16_t length);

/*
 *******************************************************************************
  @brief    注册数据底层发送函数及接收回调函数
 
  @params   output  - 底层发送函数
            process - 接收回调函数
 
  @return   无
 *******************************************************************************
 */
void FrameRegister(FrameOutput_t output, FrameProcess_t process);

/*
 *******************************************************************************
  @brief    将接收到数据包input进入Frame的内部缓存
 
  @params   data  - 接收的报文 
	    length- 报文长度
 
  @return   缓存进frame内部buFFer的数据长度，如果返回0表示frame内部buFFer已满
 *******************************************************************************
 */
uint16_t FrameInput(uint8_t *data, uint16_t length);

void FrameDataProcess(void);
#endif

